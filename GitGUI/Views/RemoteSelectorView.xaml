<UserControl x:Class="GitGUI.RemoteSelectorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:GitGUI"
             mc:Ignorable="d" 
             Height="30"
             Background="#333337"
             d:DesignHeight="230" d:DesignWidth="400">
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BoolToVis" />
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#3e3e42"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" Background="Transparent" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <StackPanel>
                                <Path HorizontalAlignment="Center" Fill="LightGray" x:Name="arrow" Data="M0,10L8,10 4,14z" Style="{DynamicResource PathStyle1}" />
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </StackPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="Fill" TargetName="arrow" Value="#FF0083A0"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#686868"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.MouseOver.Background2" Color="#FFBEE6FD"/>
        <Style x:Key="ButtonStyle2" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="30" Width="30" Height="30" x:Name="border" SnapsToDevicePixels="true" Background="Gray">
                            <Path VerticalAlignment="Center" HorizontalAlignment="Center" Stroke="AliceBlue" x:Name="contentPresenter" Focusable="False"
                                  Margin="{TemplateBinding Padding}"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  Data="M3,20 L16,20 M12,10 L8,7 M10,4 L14,7 M7,17 L3,14 M17,3 L13,0 L3,14 L3,18 L7,17 L17,3 " />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Stroke" TargetName="contentPresenter" Value="#FF0083A0"/>
                                <Setter Property="Background" TargetName="border" Value="LightGray" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.MouseOver.Background3" Color="#FFBEE6FD"/>
        <Style x:Key="ButtonStyle3" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="30" Width="30" Height="30" x:Name="border" SnapsToDevicePixels="true" Background="Gray">
                            <Path VerticalAlignment="Center" HorizontalAlignment="Center" Stroke="AliceBlue" x:Name="contentPresenter" Focusable="False"
                                  Margin="{TemplateBinding Padding}"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  Data="M3,20 L13,20 L15,6 L1,6 L3,20 M8,17 L8,9 M10.5,17 L11.5,9 M5.5,17 L4.5,9 M-1,3 L17,3 M6,3 L6,1 L10,1 L10,3" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Stroke" TargetName="contentPresenter" Value="#FF0083A0"/>
                                <Setter Property="Background" TargetName="border" Value="LightGray" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid Margin="1">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="55"/>
            <ColumnDefinition/>
            <ColumnDefinition Width="25"/>
        </Grid.ColumnDefinitions>
        <Path Margin="5,0,5,0" Fill="White">
            <Path.Data>
                <CombinedGeometry>
                    <CombinedGeometry.Geometry1>
                        <CombinedGeometry>
                            <CombinedGeometry.Geometry1>
                                <EllipseGeometry Center="15,12" RadiusX="10" RadiusY="10" />
                            </CombinedGeometry.Geometry1>
                            <CombinedGeometry.Geometry2>
                                <RectangleGeometry Rect="7,15,30,10" />
                            </CombinedGeometry.Geometry2>
                        </CombinedGeometry>
                    </CombinedGeometry.Geometry1>
                    <CombinedGeometry.Geometry2>
                        <CombinedGeometry>
                            <CombinedGeometry.Geometry1>
                                <EllipseGeometry Center="7,18" RadiusX="7" RadiusY="7" />
                            </CombinedGeometry.Geometry1>
                            <CombinedGeometry.Geometry2>
                                <CombinedGeometry>
                                    <CombinedGeometry.Geometry1>
                                        <EllipseGeometry Center="27,14" RadiusX="8" RadiusY="8" />
                                    </CombinedGeometry.Geometry1>
                                    <CombinedGeometry.Geometry2>
                                        <EllipseGeometry Center="35,18" RadiusX="7" RadiusY="7" />
                                    </CombinedGeometry.Geometry2>
                                </CombinedGeometry>
                            </CombinedGeometry.Geometry2>
                        </CombinedGeometry>
                    </CombinedGeometry.Geometry2>
                </CombinedGeometry>
            </Path.Data>
        </Path>
            <TextBlock Grid.Column="1" Margin="5,0,5,0" VerticalAlignment="Center" Foreground="White"
                    Text="{Binding RelativeSource={RelativeSource FindAncestor, 
                            AncestorType={x:Type local:RemoteSelectorView}}, 
                            Path=CRName}"
                    Padding="3" TextTrimming="CharacterEllipsis"/>
            <Button Click="DisplayPopup"  Margin="2"
                Grid.Column="2" Style="{DynamicResource ButtonStyle1}">
            <Popup MaxHeight="400" Name="popup" StaysOpen="False" Width="{Binding RelativeSource={RelativeSource FindAncestor, 
                            AncestorType={x:Type local:RemoteSelectorView}}, 
                            Path=ActualWidth}"
                       PlacementTarget ="{Binding RelativeSource={RelativeSource FindAncestor, 
                            AncestorType={x:Type local:RemoteSelectorView}}}">
                <Border BorderBrush="Gray">
                    <Grid Background="#1e1e1e">
                        <Grid.Resources>
                            <Style  TargetType="Button">
                                <Setter Property="Foreground" Value="LightGray"/>
                                <Setter Property="Background" Value="#3E3E42"/>
                                <Style.Triggers>
                                    <Trigger Property="Button.IsMouseOver" Value="True">
                                        <Setter Property="Foreground" Value="Black"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <Border Background="LightGray" BorderBrush="LightGray" BorderThickness="1" x:Name="border">
                                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="1"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <Border Background="DarkGray" BorderThickness="0">
                                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="2"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Foreground" Value="#666666" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Resources>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="30" />
                        </Grid.RowDefinitions>
                        <ListView x:Name="list" BorderThickness="0" Background="#1e1e1e" Foreground="White" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, 
                                AncestorType={x:Type local:RemoteSelectorView}}, Path=Remotes, Mode=OneWay, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True}" SelectionChanged="RemoteSelectionChanged" SelectionMode="Single">
                            <ListView.ItemContainerStyle>
                                <Style TargetType="ListViewItem">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                <Grid>
                                                    <Border x:Name="ListBoxItemRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}" CornerRadius="2" Uid="Border_57">
                                                        <StackPanel  Height="40" x:Name="ListBoxItemContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Uid="ListBoxItemContent" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                            <TextBlock TextTrimming="CharacterEllipsis" FontSize="16" Text="{Binding Name}" />
                                                            <TextBlock TextTrimming="CharacterEllipsis" Padding="0,0,0,5" Text="{Binding Url}" />
                                                        </StackPanel>
                                                    </Border>
                                                    <StackPanel Visibility="Collapsed" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Right" x:Name="buttons">
                                                        <Button Command="{Binding OnEdit}" Style="{DynamicResource ButtonStyle2}">
                                                            <Button.LayoutTransform>
                                                                <ScaleTransform ScaleX="0.8" ScaleY="0.8" />
                                                            </Button.LayoutTransform>
                                                        </Button>
                                                        <Button Margin="3,0,3,0" Command="{Binding OnDelete}" Style="{DynamicResource ButtonStyle3}">
                                                            <Button.LayoutTransform>
                                                                <ScaleTransform ScaleX="0.8" ScaleY="0.8" />
                                                            </Button.LayoutTransform>
                                                        </Button>
                                                    </StackPanel>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Visibility" Value="Visible" TargetName="buttons" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="True"/>
                                                <Condition Property="IsSelected" Value="False"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" Value="#3D26A0DA"/>
                                            <Setter Property="BorderBrush" Value="#FF26A0DA"/>
                                        </MultiTrigger>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Background" Value="#3e3e42"/>
                                            <Setter Property="BorderBrush" Value="#3e3e42"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Foreground" Value="#DADADADA"/>
                                        </Trigger>
                                    </Style.Triggers>
                                    <Style.BasedOn>
                                        <Style TargetType="{x:Type ListBoxItem}">
                                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                                            <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
                                            <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
                                            <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Padding" Value="4,2"/>
                                            <Setter Property="MinHeight" Value="20"/>
                                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                        <Border x:Name="ListBoxItemRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Uid="ListBoxItemRoot">



                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Style.BasedOn>
                                </Style>
                            </ListView.ItemContainerStyle>
                        </ListView>
                        <Button Margin="5,5,5,5" Grid.Row="1" Command="{Binding CreateNewRemote}">Create</Button>
                    </Grid>
                </Border>
            </Popup>
        </Button>
    </Grid>
</UserControl>
